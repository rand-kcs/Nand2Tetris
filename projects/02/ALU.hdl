// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    //// Replace this comment with your code.
    Mux16(a=x, b=false, sel=zx, out=x1);

    Not16(in=x1, out=notx);
    Mux16(a=x1, b=notx, sel=nx, out=x2);

    Mux16(a=y, b=false, sel=zy, out=y1);

    Not16(in=y1, out=noty);
    Mux16(a=y1, b=noty, sel=ny, out=y2);

    Add16(a=x2, b=y2, out=outk1);
    And16(a=x2, b=y2, out=outk2);

    Mux16(a=outk2, b=outk1, sel=f, out=out1);
    Not16(in=out1, out=notout1);
    Mux16(a=out1, b=notout1, sel=no, out=outfinal);
    And16(a=outfinal, b=true, out=out);


    Mux(a=false, b=true, sel=outfinal[15], out=ng);

    Or(a=false, b=outfinal[0], out=or0);
    Or(a=or0, b=outfinal[1], out=or1);
    Or(a=or1, b=outfinal[2], out=or2);
    Or(a=or2, b=outfinal[3], out=or3);
    Or(a=or3, b=outfinal[4], out=or4);
    Or(a=or4, b=outfinal[5], out=or5);
    Or(a=or5, b=outfinal[6], out=or6);
    Or(a=or6, b=outfinal[7], out=or7);
    Or(a=or7, b=outfinal[8], out=or8);
    Or(a=or8, b=outfinal[9], out=or9);
    Or(a=or9, b=outfinal[10], out=or10);
    Or(a=or10, b=outfinal[11], out=or11);
    Or(a=or11, b=outfinal[12], out=or12);
    Or(a=or12, b=outfinal[13], out=or13);
    Or(a=or13, b=outfinal[14], out=or14);
    Or(a=or14, b=outfinal[15], out=or15);

    Mux(a=true,b= false,sel=or15,out = zr);
}